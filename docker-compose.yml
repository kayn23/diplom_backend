version: "3.8"
services:
  small_delivery_postgresql_rails:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME} # Замените на имя вашей базы данных
    ports:
      - "5433:5432" # Открываем порт для доступа извне
    volumes:
      - small_delivery_pgsql_rails:/var/lib/postgresql/data

  adminer_rails:
    image: adminer
    container_name: Adminer_main
    restart: always
    ports:
      - 6080:8080

  redis_rails:
    image: redis:7.0 # Используйте актуальную версию Redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf # Подключите конфигурационный файл
      - redis_rails_data:/data # Сохраняйте данные Redis на хосте
    command: redis-server /usr/local/etc/redis/redis.conf # Укажите путь к конфигурационному файлу

  # nestjs:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: NestJS_dev
  #   working_dir: /usr/src/app
  #   volumes:
  #     - .:/usr/src/app
  #     - node_modules:/usr/src/app/node_modules # Комментарий удален, чтобы избежать проблем с кэшированием node_modules
  #   ports:
  #     - '3000:3000'
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@small_delivery_postgresql:5432/${DB_NAME}
  #
  #   depends_on:
  #     - small_delivery_postgresql
  #   command: yarn start:dev # Запуск приложения в режиме разработки

volumes:
  small_delivery_pgsql_rails:
  redis_rails_data:
