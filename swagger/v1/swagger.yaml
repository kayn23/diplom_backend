---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/login":
    post:
      summary: return token and user info
      tags:
      - login
      parameters: []
      responses:
        '200':
          description: return tokens
        '401':
          description: bad password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/orders/{order_id}/cargos":
    get:
      summary: get cargos
      tags:
      - cargos
      security:
      - Bearer: {}
      parameters:
      - name: order_id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      responses:
        '200':
          description: ok
    post:
      summary: create
      tags:
      - cargos
      security:
      - Bearer: {}
      parameters:
      - name: order_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                size:
                  type: number
                dimensions:
                  type: number
                description:
                  type: string
              required:
              - size
              - dimensions
  "/api/cities":
    get:
      summary: list cities
      tags:
      - cities
      responses:
        '200':
          description: correct response
  "/api/orders":
    get:
      summary: list orders
      tags:
      - orders
      security:
      - Bearer: {}
      parameters:
      - name: q
        in: query
        type: object
        schema:
          type: object
          properties:
            q[status_eq]:
              type: string
              description: Пример Статус заказа
        description: Параметры поиска с использованием Ransack
      responses:
        '200':
          description: empty list
        '401':
          description: not authorization
    post:
      summary: create order
      tags:
      - orders
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: create hight rule user
        '401':
          description: now authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sender_id:
                  type: number
                receiver_id:
                  type: number
                start_warehouse_id:
                  type: number
                end_warehouse_id:
                  type: number
              required:
              - start_warehouse_id
              - end_warehouse_id
  "/api/routes/{id}":
    put:
      summary: update route
      tags:
      - routes
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
      responses:
        '200':
          description: change assignee user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  start_warehouse_id:
                    type: number
                  end_warehouse_id:
                    type: number
                  user_id:
                    type: number
                required:
                - id
                - start_warehouse_id
                - end_warehouse_id
                - user_id
        '403':
          description: user don't have rule for update
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    oneOf:
                    - type: object
                      additionalProperties:
                        oneOf:
                        - type: string
                        - type: array
                          items:
                            type: string
                    - type: string
                required:
                - errors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: ответственный
              required:
              - user_id
  "/api/users":
    get:
      summary: list orders
      tags:
      - users
      security:
      - Bearer: {}
      parameters:
      - name: q
        in: query
        type: object
        schema:
          type: object
          properties:
            q[roles_name_eq]:
              type: string
              description: Пример роль
        description: Параметры поиска с использованием Ransack
      responses:
        '200':
          description: correct filered response
  "/api/warehouses":
    get:
      summary: return correct list
      tags:
      - Список складов
      responses:
        '200':
          description: correct response
    post:
      summary: create
      tags:
      - Список складов
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: created
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    oneOf:
                    - type: object
                      additionalProperties:
                        oneOf:
                        - type: string
                        - type: array
                          items:
                            type: string
                    - type: string
                required:
                - errors
        '422':
          description: bad params
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    oneOf:
                    - type: object
                      additionalProperties:
                        oneOf:
                        - type: string
                        - type: array
                          items:
                            type: string
                    - type: string
                required:
                - errors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                city_id:
                  type: number
              required:
              - name
              - address
              - city_id
  "/api/warehouses/{id}":
    put:
      summary: update
      tags:
      - Список складов
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
      responses:
        '200':
          description: updated
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    oneOf:
                    - type: object
                      additionalProperties:
                        oneOf:
                        - type: string
                        - type: array
                          items:
                            type: string
                    - type: string
                required:
                - errors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
              required:
              - name
              - address
              - city_id
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
components:
  securitySchemes:
    Bearer:
      type: apiKey
      in: header
      name: Authorization
